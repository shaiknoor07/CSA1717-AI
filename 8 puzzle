import heapq

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.zero_index = board.index(0)

    def is_goal(self):
        return self.board == list(range(1, 9)) + [0]

    def neighbors(self):
        def swap(lst, i, j):
            lst = lst[:]
            lst[i], lst[j] = lst[j], lst[i]
            return lst

        neighbors = []
        x, y = divmod(self.zero_index, 3)
        directions = {
            'Up': (x - 1, y),
            'Down': (x + 1, y),
            'Left': (x, y - 1),
            'Right': (x, y + 1)
        }

        for (dx, dy) in directions.values():
            if 0 <= dx < 3 and 0 <= dy < 3:
                new_index = dx * 3 + dy
                new_board = swap(self.board, self.zero_index, new_index)
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

    def manhattan(self):
        distance = 0
        for i, tile in enumerate(self.board):
            if tile == 0:
                continue
            goal_pos = tile - 1
            current_x, current_y = divmod(i, 3)
            goal_x, goal_y = divmod(goal_pos, 3)
            distance += abs(current_x - goal_x) + abs(current_y - goal_y)
        return distance

    def __lt__(self, other):
        return (self.moves + self.manhattan()) < (other.moves + other.manhattan())

def solve_puzzle(initial_board):
    start = PuzzleState(initial_board)
    frontier = []
    heapq.heappush(frontier, start)
    visited = set()

    while frontier:
        current = heapq.heappop(frontier)

        if tuple(current.board) in visited:
            continue

        visited.add(tuple(current.board))

        if current.is_goal():
            path = []
            while current:
                path.append(current.board)
                current = current.previous
            return path[::-1]

        for neighbor in current.neighbors():
            if tuple(neighbor.board) not in visited:
                heapq.heappush(frontier, neighbor)

    return None


initial = [1, 2, 3, 4, 0, 6, 7, 5, 8]
solution = solve_puzzle(initial)

if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        for i in range(0, 9, 3):
            print(step[i:i+3])
        print()
else:
    print("No solution found.")
