def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col:
            return False

    for i in range(row):
        if abs(board[i] - col) == abs(i - row):
            return False

    return True

def solve_n_queens(n=8):
    def backtrack(row):
        if row == n:
            solutions.append(board[:])
            return
        for col in range(n):
            if is_safe(board, row, col):
                board[row] = col
                backtrack(row + 1)

    solutions = []
    board = [-1] * n
    backtrack(0)
    return solutions

def print_solutions(solutions):
    for idx, sol in enumerate(solutions, 1):
        print(f"Solution {idx}:")
        for row in sol:
            line = ['.'] * len(sol)
            line[row] = 'Q'
            print(' '.join(line))
        print()

solutions = solve_n_queens()
print(f"Total solutions found: {len(solutions)}\n")
print_solutions(solutions)
